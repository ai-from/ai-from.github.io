const table=document.getElementById("boardTable"),metas=["Backlog","Working","Done","Completed"],addColumnBtn=document.getElementById("addColumn"),boardData=[{top:{pic:"backlog",title:"Беклог",meta:"Backlog"},tasks:[{pics:["person-1","person-2"],number:20413,title:"Интерфейс динамики кадров на предприятии"},{pics:["person-1","person-2"],number:20413,title:"Ежемесячный отчёт для куратора"},{pics:["person-1","person-2"],number:20413,title:"Статистика по заявкам"}]},{top:{pic:"working",title:"В работе",meta:"Working"},tasks:[{pics:["person-1","person-2"],number:20413,title:"Заявки сгруппировать по заявкам"},{pics:["person-1","person-2"],number:20413,title:"Ограничения по безопасности"}]},{top:{pic:"done",title:"Выполнена",meta:"Done"},tasks:[{pics:["person-1","person-2"],number:20413,title:"Проживание: новое поле для тех кто работает"},{pics:["person-1","person-2"],number:20413,title:"Рейтинг мастеров в интерфейсе менеджера"},{pics:["person-1","person-2"],number:20413,title:"Перенос данных в конце месяца"},{pics:["person-1","person-2"],number:20413,title:"Доработки по интерфейсу «Плана»"},{pics:["person-1","person-2"],number:20413,title:"Подвешенная заявка"},{pics:["person-1","person-2"],number:20413,title:"Интерфейс динамики кадров на предприятии"}]},{top:{pic:"completed",title:"Сдана",meta:"Completed"},tasks:[{pics:["person-1","person-2"],number:20413,title:"Временной промежуток при фильтрации"},{pics:["person-1","person-2"],number:20413,title:"Статистика по источникам звонка"},{pics:["person-1","person-2"],number:20413,title:"Добавить график к статистике пользователей (количество регистраций)"},{pics:["person-1","person-2"],number:20413,title:"Создать тестовую сборку сервиса (для обработки нововведений)"}]}],changeData=[...boardData]||[];getTasks=t=>{let e="";return t.forEach((t,a)=>e+=`\n       <div\n          id='${+new Date+a}'\n          class="task" \n          draggable="true"\n          ondragstart="return dragStart(event)"\n          data-task="${a}"\n       >\n         <div class="left_part">\n           <div class="persons">\n             <img draggable="false" src="./assets/img/board/${t.pics[0]}.png" alt="" title="">\n             <img draggable="false" src="./assets/img/board/${t.pics[1]}.png" alt="" title="">\n           </div>\n           <img draggable="false" class="arrows" src="./assets/img/board/arrows.svg" alt="" title="">\n         </div>\n         <div class="right_part">\n           <div class="title">\n             <span>#${t.number}:</span>${t.title}\n           </div>\n         </div>\n       </div>\n    `),e},getBoard=()=>{changeData.forEach((t,e)=>{table.insertAdjacentHTML("beforeend",`\n      <div class="item" data-column="${e}">\n        <div class="top_part">\n          <div class="left_part">\n            <img src="./assets/img/board/${t.top.pic}.png" alt="${t.top.meta}" title="${t.top.meta}">\n            <div class="title">${t.top.title}</div>\n          </div>\n          <div class="right_part">\n            <img src="./assets/img/board/edit.svg" alt="Edit" title="Edit">\n            <img onclick="deleteColumn('${e}')" src="./assets/img/board/delete.svg" alt="Delete" title="Delete">\n          </div>\n        </div>\n        <div class="tasks ${isEmptyTasks(e)}"\n             ondragenter="return dragEnter(event)"\n             ondrop="return dragDrop(event)"\n             ondragover="return dragOver(event)"\n             ondragleave="return dragLeave(event)"\n        >\n          ${getTasks(t.tasks)}\n        </div>\n        <div class="add_task">\n          <img src="./assets/img/board/plus.svg" alt="Add" title="Add">\n        </div>\n      </div>\n    `)}),setClass(),isDisabled()},addColumn=()=>{const t=[];if(changeData.length>=4)return!1;{changeData.forEach(e=>t.push(e.top.meta));let e=0;for(;e<metas.length;){if(!t.includes(metas[e])){const t=boardData.slice(e,e+1);changeData.splice(e,0,t[0]),table.innerHTML="",getBoard();break}e++}}},deleteColumn=t=>{changeData.splice(t,1),table.innerHTML="",getBoard()},setClass=()=>{let t="";switch(changeData.length){case 3:t="three";break;case 2:t="two";break;case 1:t="one"}table.className=t},isDisabled=()=>{changeData.length>=4?addColumnBtn.setAttribute("disabled","disabled"):addColumnBtn.removeAttribute("disabled")},isEmptyTasks=t=>0===changeData[t].tasks.length?"empty":"",getBoard(),dragEnter=t=>(t.preventDefault(),!0),dragDrop=t=>{const e=JSON.parse(t.dataTransfer.getData("Task"));return t.target.closest(".tasks").classList.remove("drag-hover"),e.to=t.target.closest(".item").dataset.column,updateAfterDrop(e),t.stopPropagation(),!1},dragOver=t=>{t.preventDefault();t.target.closest(".tasks").classList.add("drag-hover")},dragLeave=t=>{t.target.closest(".tasks").classList.remove("drag-hover")},dragStart=t=>{t.dataTransfer.effectAllowed="move";const e={id:t.target.getAttribute("id"),from:{column:t.target.closest(".item").dataset.column,task:t.target.closest(".task").dataset.task}};return t.dataTransfer.setData("Task",JSON.stringify(e)),t.dataTransfer.setDragImage(t.target,t.target.offsetWidth/2,t.target.offsetHeight/2),!0},updateAfterDrop=t=>{const e=changeData[+t.from.column].tasks[+t.from.task];changeData[+t.from.column].tasks.splice(+t.from.task,1),changeData[+t.to].tasks.unshift(e),table.innerHTML="",getBoard()};